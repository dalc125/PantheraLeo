# Código para medición de culmen de colibries de cundinamarca

Aquí tienes un código en Python que utiliza OpenCV y técnicas de visión por computadora para medir características morfométricas de picos de colibríes. El código incluye funcionalidades básicas y está diseñado para ser extendido:

```python
import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
from scipy.spatial import distance

def preprocess_image(img_path):
    img = cv2.imread(img_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)
    edges = cv2.Canny(blurred, 50, 150)
    return img, edges

def find_beak_contour(edges):
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        return largest_contour
    return None

def calculate_metrics(contour, img):
    metrics = {}
    
    # Longitud total
    hull = cv2.convexHull(contour)
    metrics['length'] = cv2.arcLength(hull, closed=False)
    
    # Ancho máximo
    rect = cv2.minAreaRect(contour)
    metrics['width'] = max(rect[1])
    
    # Curvatura
    hull_points = np.squeeze(hull)
    start, end = hull_points[0], hull_points[-1]
    mid_point = hull_points[len(hull_points)//2]
    
    a = distance.euclidean(start, mid_point)
    b = distance.euclidean(mid_point, end)
    c = distance.euclidean(start, end)
    
    metrics['curvature'] = (a**2 + b**2 - c**2)/(2*a*b) if a*b != 0 else 0
    
    # Puntos de referencia visuales
    cv2.drawContours(img, [hull], -1, (0,255,0), 2)
    cv2.line(img, tuple(start), tuple(end), (255,0,0), 2)
    
    return metrics, img

def process_folder(input_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)
    
    for filename in os.listdir(input_folder):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            img_path = os.path.join(input_folder, filename)
            
            # Procesamiento de imagen
            img, edges = preprocess_image(img_path)
            contour = find_beak_contour(edges)
            
            if contour is not None:
                # Cálculo de métricas
                metrics, result_img = calculate_metrics(contour, img)
                
                # Guardar resultados
                cv2.imwrite(os.path.join(output_folder, f'result_{filename}'), result_img)
                
                # Añadir métricas personalizadas (ejemplo)
                metrics['custom_metric'] = cv2.contourArea(contour)
                
                yield filename, metrics

# Configuración de rutas
input_folder = "ruta/a/tu/carpeta_de_entrada"
output_folder = "ruta/a/tu/carpeta_de_salida"

# Procesar imágenes y mostrar resultados
for filename, metrics in process_folder(input_folder, output_folder):
    print(f"\nMedidas para {filename}:")
    print(f"Longitud del pico: {metrics['length']:.2f} px")
    print(f"Ancho máximo: {metrics['width']:.2f} px")
    print(f"Índice de curvatura: {metrics['curvature']:.2f}")
    print(f"Métrica personalizada: {metrics['custom_metric']:.2f}")

# Visualización de ejemplo (opcional)
sample_img = cv2.imread(os.path.join(output_folder, f'result_{os.listdir(input_folder)[0]}'))
plt.imshow(cv2.cvtColor(sample_img, cv2.COLOR_BGR2RGB))
plt.title("Ejemplo de mediciones")
plt.show()
